[{"id":"b5da432f.7d82e","type":"function","z":"c9ba90e3.05854","name":"GenericJson","func":"msg.headers = {'content-type':'application/json','accept':'application/json' };\nvar generic = {\n    userId: \"defaultID\",\n    payload:\"\",\n    persistence: {\n        key: \"defaultKey\",\n        cache: \"true\",\n        db: false\n    },\n    amqp:  {\n        queue: \"testRestQueue\",\n        bindingKey: \"testRestBindingKey\"\n    }\n};\n\ngeneric.payload = msg.payload;\n\nmsg.payload = generic;\nreturn msg;\n\n","outputs":"1","noerr":0,"x":650,"y":1240,"wires":[["9374eea0.7ceb9","2d48b250.fecd8e"]]},{"id":"64641c0f.f68574","type":"mqtt in","z":"c9ba90e3.05854","name":"MQTT Node - TheThingsNetwork","topic":"+/devices/+/up","qos":"2","broker":"ac4dc28f.6aa53","x":150,"y":1180,"wires":[["23b9b9f4.38e006"]]},{"id":"23b9b9f4.38e006","type":"function","z":"c9ba90e3.05854","name":"Decrypt Payload","func":"// msg1 - Unencrypted (vanilla data)\nvar msgRaw = { payload: msg.payload.length };\nmsgRaw.payload = JSON.parse(msg.payload);\nmsgRaw.payload = msgRaw.payload.payload_raw;\n\n// msg2 - Decrypt to Text\nvar msgAscii = { payload: msg.payload.length };\nmsgAscii.payload = JSON.parse(msg.payload);\nmsgAscii.payload = new Buffer(msgAscii.payload.payload_raw, 'base64').toString('ascii');\n\n// msg3 - Decrypt as Hex value (MSB,LSB)\nvar msgHex = { payload: msg.payload.length };\nmsgHex.payload = JSON.parse(msg.payload);\nmsgHex.payload.payload_raw = new Buffer(msgHex.payload.payload_raw, 'base64').toString('hex');\n\n// msg3 - Decrypt as Binary value (MSB,LSB)\nvar msgBinary = { payload: msg.payload.length };\nmsgBinary.payload = parseInt(msgHex.payload, 16);\n\n//change outputs to 4\n// return [ msgRaw, msgAscii, msgHex, msgBinary ];\n\nreturn [msgHex];","outputs":"1","noerr":0,"x":380,"y":1100,"wires":[["44011108.cd157"]]},{"id":"44011108.cd157","type":"function","z":"c9ba90e3.05854","name":"S4T from TTN","func":"function processLOPYPayload (content) {\n    while (content.length >= 16) {\n        processOneElement(content.substr(0, 16));\n        content = content.substr(16, content.length-1) ;\n    }  \n}\n\nfunction processOneElement(oneElement){\n    wifi0 = wifi.constructor();\n    type = parseInt(oneElement.substr(0,2),16);\n    wifi0.ssid = format2MAC(oneElement.substr(2, 12));\n    wifi0.rssi = parseInt(oneElement.substr(14, 2),16) + \"\";\n    s4t.wifi.push(wifi0);    \n}\n\nfunction format2MAC(bssid){\n    var mac = \"\";\n    return mac.concat(bssid.substr(0,2), \":\",bssid.substr(2,2), \":\",bssid.substr(4,2), \":\",bssid.substr(6,2), \":\",bssid.substr(8,2), \":\",bssid.substr(10,2));\n}\n\n var ttnNode = msg.payload;\n\n// var bssid0 = \"dc:53:7c:f0:25:3d\";\n// var rssi0 = \"13\";\n\n// var bssid1 = \"64:7c:34:4d:2e:79\";\n// var rssi1 = \"13\";\n\nvar s4t = {\n    s4tId:\"\", \n    timestamp: Date.now(),\n    wifi: [\n    ]\n};\n\nvar wifi =\n        {\n            ssid: \"\",\n            rssi: \"\"\n        };\n        \ns4t.s4tId = ttnNode.dev_id;\ns4t.timestamp = ttnNode.metadata.time;\n\n// LOPY hex message\n var ttn = msg.payload.payload_raw;\n\n//decoding LOPY HEX message\n// ttn = lastTTN.split();\ntransaction_id = parseInt(ttn.substr(0,2),16);\nmsg_id = parseInt(ttn.substr(2,2),16);\n\n//multiple elements of diff types [3 - wifi, 1 - lbe]\ncontent = ttn.substr(4, ttn.length -4 - 8 -1);\n//there is only wifi[3] for now. pay attention when 03 is part of BSSID or RSSI as parsing is failing\nprocessLOPYPayload(content);\n\naccel = ttn.substr(ttn.length - 8, ttn.length -1);\nacc_type = parseInt(accel.substr(0,2),16);\n//3 bytes each one representing one axe\nacc_info = accel.substr(2, accel.length-1);\n\n\n msg.payload = s4t;\n return [msg, null];","outputs":"1","noerr":0,"x":460,"y":1240,"wires":[["b5da432f.7d82e"]]},{"id":"c51bf32.4996f1","type":"debug","z":"c9ba90e3.05854","name":"","active":true,"console":"false","complete":"false","x":1230,"y":1100,"wires":[]},{"id":"2d48b250.fecd8e","type":"http request","z":"c9ba90e3.05854","name":"Publish IOTHeartBeat as GenericJson","method":"PUT","ret":"obj","url":"http://java:8082/generic/process","tls":"","x":930,"y":1100,"wires":[["c51bf32.4996f1"]]},{"id":"9374eea0.7ceb9","type":"debug","z":"c9ba90e3.05854","name":"","active":true,"console":"false","complete":"false","x":1230,"y":1240,"wires":[]},{"id":"ac4dc28f.6aa53","type":"mqtt-broker","z":"c9ba90e3.05854","broker":"eu.thethings.network","port":"1883","clientid":"","usetls":false,"verifyservercert":true,"compatmode":true,"keepalive":"60","cleansession":true,"willTopic":"","willQos":"0","willRetain":null,"willPayload":"","birthTopic":"","birthQos":"0","birthRetain":null,"birthPayload":""}]